name: RisingOS Revived Builder

on:
  workflow_dispatch:
    inputs:
      BRAND:
        description: 'Put your device manufacturer name please.'
        required: true
      CODENAME:
        description: 'Put your device codename please.'
        required: true
      TYPE:
        description: 'The build type. Set to "userdebug" by default.'
        required: true
        default: 'userdebug'
        type: choice
        options:
          - 'eng'
          - 'user'
          - 'userdebug'
      VARIANT:
        description: 'If you wanna build other variants like vanilla, core or gapps.'
        required: false
        default: 'VANILLA'
        type: choice
        options:
          - 'VANILLA'
          - 'CORE'
          - 'GAPPS'


permissions:
  actions: write
  contents: write
  statuses: write

jobs:

  build: runs-on:ubuntu-latest

    steps:
      - name: Set Start Time
        id: start_time
        run: echo "BUILD_START_TIME=$(date +%s)" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Job ID
        uses: austenstone/job-id@v1
        id: get_job_id

      - name: Init and Sync
        run: bash resync.sh

      - name: Clone Repositories
        run: bash clone.sh

      - name: Set flags
        run: bash misc/flags.sh

      - name: Build RisingOS
        run: bash build.sh

      - name: Upload Build Files to Gofile
        id: upload_files
        if: ${{ success() }}
        run: bash upload.sh

      - name: Capture Gofile Links
        if: ${{ steps.upload_files.outcome == 'success' }}
        run: |
          echo "ROM_GOFILE_LINKS=$(cat $GITHUB_ENV | grep -oE "ROM_GOFILE_LINKS=[^ ]*")" >> $GITHUB_OUTPUT
          echo "BOOT_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "BOOT_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
          echo "DTBO_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "DTBO_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
          echo "VENDOR_BOOT_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "VENDOR_BOOT_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
          echo "RECOVERY_IMG_LINK=$(cat $GITHUB_ENV | grep -oE "RECOVERY_IMG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
        id: gofile_links

      - name: Upload Error Log to Gofile
        id: upload_error-log
        if: ${{ failure() }}
        run: bash error-log_upload.sh

      - name: Capture error.log Gofile Link
        if: ${{ steps.upload_error-log.outcome == 'success' }}
        run: |
          echo "ERROR_LOG_LINK=$(cat $GITHUB_ENV | grep -oE "ERROR_LOG_LINK=[^ ]*")" >> $GITHUB_OUTPUT
        id: gofile_error-log_link

      - name: Post-Cleanup
        if: ${{ always() }}
        run: bash clean.sh

      - name: Set End Time
        id: end_time
        if: always()
        run: echo "BUILD_END_TIME=$(date +%s)" >> "$GITHUB_ENV"

      - name: Calculate Duration
        id: calculate_duration
        if: always()
        run: |
          start_time="${{ env.BUILD_START_TIME }}"
          end_time="${{ env.BUILD_END_TIME }}"
          duration_seconds=$((end_time - start_time))
          duration=$(echo "$duration_seconds" | awk '{
            h = int($1 / 3600);
            m = int(($1 % 3600) / 60);
            s = $1 % 60;
            printf "%02d:%02d:%02d", h, m, s;
          }')
          echo "BUILD_DURATION=$duration" >> "$GITHUB_ENV"

      - name: Notify Build Success (Telegram)
        if: ${{ success() }}
        run: |
          RUN_ID="${{ github.run_id }}"
          JOB_ID="${{ steps.get_job_id.outputs.job-id }}"
          STEP_NUMBER="10"

          LOG_LINK="https://github.com/${{ github.repository }}/actions/runs/${RUN_ID}/job/${JOB_ID}#step:${STEP_NUMBER}:16"
          MESSAGE2="‚úÖ Build for ${{ inputs.CODENAME }} succeeded!
          üîó Download Links: [link](${LOG_LINK})
          ‚è±Ô∏è Build Time: ${{ env.BUILD_DURATION }}"
         
          bash telegram_notify.sh "$MESSAGE2" "$BOT_TOKEN" "$CHAT_ID" "$THREAD_ID"

      - name: Notify Build Failure (Telegram)
        if: ${{ failure() }}
        run: |
          RUN_ID="${{ github.run_id }}"
          JOB_ID="${{ steps.get_job_id.outputs.job-id }}"
          ERROR_STEP_NUMBER="17"

          ERROR_LOG_LINK="https://github.com/${{ github.repository }}/actions/runs/${RUN_ID}/job/${JOB_ID}#step:${ERROR_STEP_NUMBER}:22"
          MESSAGE3="‚ùå Build for ${{ inputs.CODENAME }} failed.
          üîó Download error.log: [link](${ERROR_LOG_LINK})
          ‚è±Ô∏è Build Time: ${{ env.BUILD_DURATION }}"

          bash telegram_notify.sh "$MESSAGE3" "$BOT_TOKEN" "$CHAT_ID" "$THREAD_ID"

      - name: Notify Build Cancelled
        if: ${{ cancelled() }}
        run: |
          MESSAGE4="üö´ Build for ${{ inputs.CODENAME }} is cancelled!
          Workflow: [link](${WORKFLOW_RUN_URL})
          ‚è±Ô∏è Build Time: ${{ env.BUILD_DURATION }}"

          bash telegram_notify.sh "$MESSAGE4" "$BOT_TOKEN" "$CHAT_ID" "$THREAD_ID"

